// Code generated by protoc-gen-go.
// source: terraform-api.proto
// DO NOT EDIT!

/*
Package tfpb is a generated protocol buffer package.

It is generated from these files:
	terraform-api.proto

It has these top-level messages:
	ApplyRequest
	ApplyResponse
	PlanRequest
	PlanResponse
	RefreshRequest
	RefreshResponse
	StateRequest
	StateResponse
	TaintRequest
	TaintResponse
	ValidateRequest
	ValidateResponse
*/
package tfpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ResourceState int32

const (
	ResourceState_StateUnknown      ResourceState = 0
	ResourceState_StateRunning      ResourceState = 1
	ResourceState_StateProvisioning ResourceState = 2
	ResourceState_StateSuccess      ResourceState = 3
	ResourceState_StateError        ResourceState = 4
)

var ResourceState_name = map[int32]string{
	0: "StateUnknown",
	1: "StateRunning",
	2: "StateProvisioning",
	3: "StateSuccess",
	4: "StateError",
}
var ResourceState_value = map[string]int32{
	"StateUnknown":      0,
	"StateRunning":      1,
	"StateProvisioning": 2,
	"StateSuccess":      3,
	"StateError":        4,
}

func (x ResourceState) String() string {
	return proto.EnumName(ResourceState_name, int32(x))
}
func (ResourceState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResourceAction int32

const (
	ResourceAction_ActionUnknown   ResourceAction = 0
	ResourceAction_ActionNone      ResourceAction = 1
	ResourceAction_ActionCreate    ResourceAction = 2
	ResourceAction_ActionUpdate    ResourceAction = 3
	ResourceAction_ActionDestroy   ResourceAction = 4
	ResourceAction_ActionRecreate  ResourceAction = 5
	ResourceAction_ActionProvision ResourceAction = 6
)

var ResourceAction_name = map[int32]string{
	0: "ActionUnknown",
	1: "ActionNone",
	2: "ActionCreate",
	3: "ActionUpdate",
	4: "ActionDestroy",
	5: "ActionRecreate",
	6: "ActionProvision",
}
var ResourceAction_value = map[string]int32{
	"ActionUnknown":   0,
	"ActionNone":      1,
	"ActionCreate":    2,
	"ActionUpdate":    3,
	"ActionDestroy":   4,
	"ActionRecreate":  5,
	"ActionProvision": 6,
}

func (x ResourceAction) String() string {
	return proto.EnumName(ResourceAction_name, int32(x))
}
func (ResourceAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ApplyRequest represents a apply request
type ApplyRequest struct {
	Config      []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Destroy     bool   `protobuf:"varint,2,opt,name=destroy" json:"destroy,omitempty"`
	Plan        []byte `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Refresh     bool   `protobuf:"varint,4,opt,name=refresh" json:"refresh,omitempty"`
	State       []byte `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Parallelism int32  `protobuf:"varint,6,opt,name=parallelism" json:"parallelism,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ApplyResponse represents a apply response
type ApplyResponse struct {
	Serial int64                    `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	State  []byte                   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	States map[string]ResourceState `protobuf:"bytes,3,rep,name=states" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=tfpb.ResourceState"`
	Errors []string                 `protobuf:"bytes,4,rep,name=errors" json:"errors,omitempty"`
}

func (m *ApplyResponse) Reset()                    { *m = ApplyResponse{} }
func (m *ApplyResponse) String() string            { return proto.CompactTextString(m) }
func (*ApplyResponse) ProtoMessage()               {}
func (*ApplyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApplyResponse) GetStates() map[string]ResourceState {
	if m != nil {
		return m.States
	}
	return nil
}

// PlanRequest represents a plan request
type PlanRequest struct {
	Config      []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Destroy     bool   `protobuf:"varint,2,opt,name=destroy" json:"destroy,omitempty"`
	Refresh     bool   `protobuf:"varint,3,opt,name=refresh" json:"refresh,omitempty"`
	State       []byte `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Parallelism int32  `protobuf:"varint,5,opt,name=parallelism" json:"parallelism,omitempty"`
}

func (m *PlanRequest) Reset()                    { *m = PlanRequest{} }
func (m *PlanRequest) String() string            { return proto.CompactTextString(m) }
func (*PlanRequest) ProtoMessage()               {}
func (*PlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// PlanResponse represents a plan response
type PlanResponse struct {
	Diff     []byte                    `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
	Actions  map[string]ResourceAction `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=tfpb.ResourceAction"`
	Plan     []byte                    `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Serial   int64                     `protobuf:"varint,4,opt,name=serial" json:"serial,omitempty"`
	State    []byte                    `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Warnings []string                  `protobuf:"bytes,6,rep,name=warnings" json:"warnings,omitempty"`
}

func (m *PlanResponse) Reset()                    { *m = PlanResponse{} }
func (m *PlanResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()               {}
func (*PlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlanResponse) GetActions() map[string]ResourceAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

// RefreshRequest represents a refresh request
type RefreshRequest struct {
	Config      []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	State       []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Parallelism int32  `protobuf:"varint,3,opt,name=parallelism" json:"parallelism,omitempty"`
}

func (m *RefreshRequest) Reset()                    { *m = RefreshRequest{} }
func (m *RefreshRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshRequest) ProtoMessage()               {}
func (*RefreshRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// RefreshResponse represents a refresh response
type RefreshResponse struct {
	Serial int64  `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	State  []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *RefreshResponse) Reset()                    { *m = RefreshResponse{} }
func (m *RefreshResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshResponse) ProtoMessage()               {}
func (*RefreshResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// StateRequest represents a new state request
type StateRequest struct {
}

func (m *StateRequest) Reset()                    { *m = StateRequest{} }
func (m *StateRequest) String() string            { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()               {}
func (*StateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// StateResponse represents a new state response
type StateResponse struct {
	Serial int64  `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	State  []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// TaintRequest represents a taint request
type TaintRequest struct {
	Module   string `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
	Resource string `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	State    []byte `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *TaintRequest) Reset()                    { *m = TaintRequest{} }
func (m *TaintRequest) String() string            { return proto.CompactTextString(m) }
func (*TaintRequest) ProtoMessage()               {}
func (*TaintRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// TaintResponse represents a taint response
type TaintResponse struct {
	Serial int64  `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	State  []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *TaintResponse) Reset()                    { *m = TaintResponse{} }
func (m *TaintResponse) String() string            { return proto.CompactTextString(m) }
func (*TaintResponse) ProtoMessage()               {}
func (*TaintResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// ValidateRequest represents a validation request
type ValidateRequest struct {
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// ValidateResponse represents a validation response
type ValidateResponse struct {
	Valid    bool     `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Warnings []string `protobuf:"bytes,2,rep,name=warnings" json:"warnings,omitempty"`
	Errors   []string `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *ValidateResponse) Reset()                    { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()               {}
func (*ValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*ApplyRequest)(nil), "tfpb.ApplyRequest")
	proto.RegisterType((*ApplyResponse)(nil), "tfpb.ApplyResponse")
	proto.RegisterType((*PlanRequest)(nil), "tfpb.PlanRequest")
	proto.RegisterType((*PlanResponse)(nil), "tfpb.PlanResponse")
	proto.RegisterType((*RefreshRequest)(nil), "tfpb.RefreshRequest")
	proto.RegisterType((*RefreshResponse)(nil), "tfpb.RefreshResponse")
	proto.RegisterType((*StateRequest)(nil), "tfpb.StateRequest")
	proto.RegisterType((*StateResponse)(nil), "tfpb.StateResponse")
	proto.RegisterType((*TaintRequest)(nil), "tfpb.TaintRequest")
	proto.RegisterType((*TaintResponse)(nil), "tfpb.TaintResponse")
	proto.RegisterType((*ValidateRequest)(nil), "tfpb.ValidateRequest")
	proto.RegisterType((*ValidateResponse)(nil), "tfpb.ValidateResponse")
	proto.RegisterEnum("tfpb.ResourceState", ResourceState_name, ResourceState_value)
	proto.RegisterEnum("tfpb.ResourceAction", ResourceAction_name, ResourceAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Terraform service

type TerraformClient interface {
	// Build or update the infrastructure
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (Terraform_ApplyClient, error)
	// Generate a diff and execution plan
	Plan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	// Update the state against real resources
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Get a new empty state
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// Mark a resource for recreation
	Taint(ctx context.Context, in *TaintRequest, opts ...grpc.CallOption) (*TaintResponse, error)
	// Validate a Terraform configuration
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type terraformClient struct {
	cc *grpc.ClientConn
}

func NewTerraformClient(cc *grpc.ClientConn) TerraformClient {
	return &terraformClient{cc}
}

func (c *terraformClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (Terraform_ApplyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Terraform_serviceDesc.Streams[0], c.cc, "/tfpb.Terraform/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &terraformApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Terraform_ApplyClient interface {
	Recv() (*ApplyResponse, error)
	grpc.ClientStream
}

type terraformApplyClient struct {
	grpc.ClientStream
}

func (x *terraformApplyClient) Recv() (*ApplyResponse, error) {
	m := new(ApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terraformClient) Plan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := grpc.Invoke(ctx, "/tfpb.Terraform/Plan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := grpc.Invoke(ctx, "/tfpb.Terraform/Refresh", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := grpc.Invoke(ctx, "/tfpb.Terraform/State", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) Taint(ctx context.Context, in *TaintRequest, opts ...grpc.CallOption) (*TaintResponse, error) {
	out := new(TaintResponse)
	err := grpc.Invoke(ctx, "/tfpb.Terraform/Taint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/tfpb.Terraform/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Terraform service

type TerraformServer interface {
	// Build or update the infrastructure
	Apply(*ApplyRequest, Terraform_ApplyServer) error
	// Generate a diff and execution plan
	Plan(context.Context, *PlanRequest) (*PlanResponse, error)
	// Update the state against real resources
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Get a new empty state
	State(context.Context, *StateRequest) (*StateResponse, error)
	// Mark a resource for recreation
	Taint(context.Context, *TaintRequest) (*TaintResponse, error)
	// Validate a Terraform configuration
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

func RegisterTerraformServer(s *grpc.Server, srv TerraformServer) {
	s.RegisterService(&_Terraform_serviceDesc, srv)
}

func _Terraform_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerraformServer).Apply(m, &terraformApplyServer{stream})
}

type Terraform_ApplyServer interface {
	Send(*ApplyResponse) error
	grpc.ServerStream
}

type terraformApplyServer struct {
	grpc.ServerStream
}

func (x *terraformApplyServer) Send(m *ApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Terraform_Plan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TerraformServer).Plan(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Terraform_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TerraformServer).Refresh(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Terraform_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TerraformServer).State(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Terraform_Taint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TerraformServer).Taint(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Terraform_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TerraformServer).Validate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Terraform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tfpb.Terraform",
	HandlerType: (*TerraformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Plan",
			Handler:    _Terraform_Plan_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Terraform_Refresh_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Terraform_State_Handler,
		},
		{
			MethodName: "Taint",
			Handler:    _Terraform_Taint_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Terraform_Validate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _Terraform_Apply_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 686 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xad, 0x63, 0x3b, 0x4d, 0x6e, 0x5e, 0xee, 0x84, 0xa2, 0x28, 0x1b, 0xc0, 0x6c, 0xaa, 0x4a,
	0x84, 0x2a, 0xb0, 0xa8, 0x60, 0x81, 0x4a, 0xdb, 0x2d, 0xaa, 0xd2, 0xc2, 0xde, 0x75, 0x26, 0xc5,
	0xaa, 0x63, 0x9b, 0x19, 0xa7, 0x55, 0xbe, 0x83, 0x4f, 0xe1, 0x4b, 0x10, 0x3f, 0xc4, 0x9d, 0x87,
	0x9d, 0x99, 0x50, 0xa4, 0xec, 0xe2, 0x3b, 0x73, 0xce, 0x99, 0x39, 0xf7, 0xdc, 0x09, 0x0c, 0x4b,
	0xca, 0x58, 0xb4, 0xc8, 0xd9, 0xf2, 0x4d, 0x54, 0x24, 0x93, 0x82, 0xe5, 0x65, 0x4e, 0xbc, 0x72,
	0x51, 0xdc, 0x86, 0x0c, 0xba, 0x67, 0x45, 0x91, 0xae, 0x67, 0xf4, 0xc7, 0x8a, 0xf2, 0x92, 0xf4,
	0xa1, 0x19, 0xe7, 0xd9, 0x22, 0xb9, 0x1b, 0x39, 0x2f, 0x9d, 0xa3, 0x2e, 0x19, 0xc0, 0xfe, 0x1c,
	0xeb, 0x2c, 0x5f, 0x8f, 0x1a, 0x58, 0x68, 0x91, 0x2e, 0x78, 0x45, 0x1a, 0x65, 0x23, 0xb7, 0x5a,
	0x66, 0x74, 0xc1, 0x28, 0xff, 0x3e, 0xf2, 0xe4, 0x72, 0x0f, 0x7c, 0x5e, 0x46, 0x25, 0x1d, 0xf9,
	0x72, 0x7d, 0x08, 0x9d, 0x22, 0x62, 0x51, 0x9a, 0xd2, 0x34, 0xe1, 0xcb, 0x51, 0x13, 0x8b, 0x7e,
	0xf8, 0xcb, 0x81, 0x9e, 0x16, 0xe5, 0x45, 0x9e, 0x71, 0x2a, 0x54, 0x39, 0x65, 0x49, 0x94, 0x4a,
	0x55, 0x77, 0xc3, 0xd2, 0x90, 0x2c, 0x6f, 0x71, 0x59, 0x7c, 0x72, 0x54, 0x75, 0x8f, 0x3a, 0xd3,
	0x17, 0x13, 0x71, 0xf6, 0x89, 0xc5, 0x31, 0xb9, 0x96, 0x3b, 0x2e, 0xb3, 0x92, 0xad, 0x05, 0x1f,
	0xde, 0x38, 0x67, 0x1c, 0x4f, 0xe5, 0x1e, 0xb5, 0xc7, 0x9f, 0xa1, 0x63, 0x2e, 0x77, 0xc0, 0xbd,
	0xa7, 0x6b, 0xa9, 0xd5, 0x26, 0x21, 0xf8, 0x0f, 0x51, 0xba, 0x52, 0x5a, 0xfd, 0xe9, 0x50, 0x71,
	0x23, 0x6d, 0xbe, 0x62, 0x31, 0x95, 0xb0, 0x0f, 0x8d, 0x53, 0x27, 0x8c, 0xa1, 0x73, 0x85, 0x17,
	0xdf, 0xd9, 0x28, 0xc3, 0x1a, 0xd7, 0xb6, 0xc6, 0x7b, 0xca, 0x1a, 0x5f, 0x5a, 0xf3, 0xc7, 0x81,
	0xae, 0x52, 0xd1, 0xce, 0xa0, 0xdd, 0xf3, 0x64, 0xb1, 0xd0, 0x22, 0x27, 0xb0, 0x1f, 0xc5, 0x65,
	0x82, 0x2b, 0x28, 0x62, 0x38, 0x61, 0x42, 0x26, 0x67, 0x6a, 0x87, 0xba, 0xaa, 0xdd, 0xae, 0x8d,
	0xcf, 0x9e, 0xed, 0xb3, 0xea, 0x56, 0x00, 0xad, 0xc7, 0x88, 0x65, 0x49, 0x76, 0xc7, 0xb1, 0x55,
	0xc2, 0xb8, 0x0b, 0x8c, 0x87, 0x49, 0x67, 0x39, 0xf7, 0xda, 0x76, 0xee, 0x99, 0xed, 0x9c, 0xc2,
	0x49, 0xeb, 0x2e, 0xa0, 0x3f, 0x53, 0x56, 0xfc, 0xcf, 0xbd, 0xad, 0x86, 0x6f, 0x79, 0xe3, 0x4a,
	0x6f, 0x4e, 0x60, 0x50, 0xb3, 0xec, 0x94, 0x9b, 0xb0, 0x0f, 0x5d, 0xd9, 0x3f, 0xad, 0x1a, 0x4e,
	0xa0, 0xa7, 0xbf, 0x77, 0xc3, 0x7f, 0x82, 0xee, 0x4d, 0x94, 0x64, 0xa5, 0x71, 0xea, 0x65, 0x3e,
	0x5f, 0xa5, 0x54, 0x1b, 0x80, 0x7e, 0x31, 0x7d, 0x5b, 0x89, 0x68, 0x6f, 0x08, 0xa4, 0xdf, 0x42,
	0x50, 0x13, 0xec, 0x26, 0xf8, 0x0a, 0x06, 0xdf, 0xa2, 0x34, 0x99, 0x6f, 0xce, 0xbc, 0xed, 0x54,
	0x78, 0x0e, 0xc1, 0x66, 0x8b, 0x66, 0xed, 0xc9, 0x46, 0x24, 0x73, 0xb9, 0xa5, 0x65, 0xb5, 0x51,
	0xc4, 0xa4, 0x6d, 0xcc, 0x83, 0x18, 0xa0, 0xf6, 0x71, 0x0a, 0x3d, 0x2b, 0xe0, 0x08, 0x51, 0x4e,
	0x7d, 0xcd, 0xee, 0xb3, 0xfc, 0x31, 0x0b, 0xf6, 0xea, 0xca, 0x6c, 0x95, 0x09, 0xa6, 0xc0, 0x21,
	0x87, 0x70, 0x20, 0x2b, 0x57, 0x2c, 0x7f, 0x48, 0x38, 0xf6, 0x56, 0x94, 0x1b, 0xf5, 0xc6, 0xeb,
	0x55, 0x1c, 0x53, 0xce, 0x03, 0x17, 0xd5, 0x40, 0x56, 0x2e, 0x85, 0x64, 0xe0, 0x1d, 0xff, 0x74,
	0x44, 0xff, 0xcd, 0x54, 0x90, 0x03, 0x7c, 0x01, 0xe4, 0xaf, 0x8d, 0x20, 0xa2, 0x54, 0xe9, 0x4b,
	0x9e, 0x51, 0x94, 0x0b, 0xaa, 0xe8, 0x9d, 0x33, 0x8a, 0x64, 0x4a, 0x49, 0x83, 0x0a, 0x71, 0x7d,
	0x54, 0xaa, 0x69, 0x2e, 0xd4, 0xe8, 0x05, 0x1e, 0x21, 0xd0, 0x57, 0xa5, 0x19, 0x8d, 0x15, 0xd0,
	0xc7, 0x38, 0x0d, 0x54, 0xad, 0x3e, 0x7a, 0xd0, 0x9c, 0xfe, 0x6e, 0x40, 0xfb, 0xa6, 0x7a, 0x17,
	0xc9, 0x7b, 0xf0, 0xe5, 0x73, 0x42, 0x88, 0xf5, 0xb6, 0xc8, 0x1e, 0x8c, 0x87, 0x4f, 0xbc, 0x37,
	0xe1, 0xde, 0x89, 0x83, 0x0f, 0x93, 0x27, 0x46, 0x8f, 0x1c, 0x98, 0x63, 0xa8, 0x30, 0xe4, 0xdf,
	0xc9, 0x0c, 0xf7, 0xc8, 0x29, 0xec, 0xeb, 0x0c, 0x93, 0x7a, 0x5c, 0xcc, 0xc1, 0x18, 0x1f, 0x6e,
	0x55, 0x6b, 0xe4, 0x14, 0x7c, 0xd5, 0x2a, 0x4d, 0x6c, 0x06, 0xbb, 0x3a, 0xa0, 0x15, 0x6e, 0x85,
	0x91, 0xf1, 0xab, 0x30, 0x66, 0x98, 0x2b, 0x8c, 0x95, 0x4f, 0xc4, 0x7c, 0x84, 0x56, 0x95, 0x2f,
	0xa2, 0x0f, 0xb3, 0x15, 0xc9, 0xf1, 0xf3, 0xed, 0x72, 0x05, 0xbe, 0x6d, 0xca, 0xbf, 0x96, 0x77,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xa0, 0xfb, 0xe0, 0x71, 0x06, 0x00, 0x00,
}
